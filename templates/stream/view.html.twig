{# home/home.html.twig #}
{% extends 'base.html.twig' %}

{% block stylesheets %}
    {{ parent() }}

    <style type="text/css">
        /*
        videoContainer {
            margin: 0 auto;
            max-width:700px;
            min-width:500px;
        }
        */

        .chat-wrapper {
            font: bold 11px/normal 'lucida grande', tahoma, verdana, arial, sans-serif;
            background: #000000;
            padding: 20px;
            margin: 20px auto;
            box-shadow: 2px 2px 2px 0px #00000017;
            max-width:700px;
            min-width:500px;
        }
        #message-box {
            width: 100%;
            display: inline-block;
            height: 250px;
            background: #fff;
            box-shadow: inset 0px 0px 2px #00000017;
            overflow: auto;
            padding: 10px;
        }
        .user-panel{
            margin-top: 10px;
        }
        input[type=text]{
            border: none;
            padding: 5px 5px;
            box-shadow: 2px 2px 2px #0000001c;
        }
        input[type=text]#name{
            width:20%;
        }
        input[type=text]#message{
            width:60%;
        }
        button#send-message {
            border: none;
            padding: 5px 15px;
            background: #ffe300;
            box-shadow: 2px 2px 2px #0000001c;
        }
        .center {
            text-align: center;
        }
    </style>
{% endblock %}

{% block body %}

    {% if (showEvent)  %}
        <div class="section-title text-center">
            <h2>{{ streamer }}</h2>
        </div>
        <div class="chat-wrapper">
            <div class="embed-responsive embed-responsive-16by9">
                <!-- <iframe id="videoContainer" class="embed-responsive-item" width="100%" height="100%" src="//live.jamesjudge.info:5080/LiveApp/play.html?name={{ streamID }}" frameborder="0" allowfullscreen></iframe> -->
                <video id="video-player" controls playsinline></video>
            </div>

            <div id="message-box"></div>
            <div class="user-panel">
                <input type="hidden" name="name" id="name" value="{{ nickname }}" />
                <input type="text" name="message" id="message" placeholder="Type your message here..." maxlength="255" />
                <button id="send-message">Send</button>
            </div>
        </div>
    {% elseif (ticksetPurchased == 0) %}
        <div class="section-title text-center">
            <h2>{{ streamer }}</h2>
        </div>
        <div align="center"><h4>You have not purchased ticket of this venue</h4></div>
        <div>&nbsp;</div>
        <div class="center"><a href="/profile/{{ streamer }}">Click here to purchase ticket</a></div>
        <div>&nbsp;</div>
    {% else %}
        <div class="section-title text-center">
            <h2>{{ streamer }}</h2>
        </div>
        <div align="center"><h4>No any event going on current time</h4></div>
        <div>&nbsp;</div>
    {% endif %}

{% endblock %}


{% block javascripts %}

    {{ parent() }}

    <script language="javascript" type="text/javascript">
        // JS for chat server
        // create a new WebSocket object.
        var msgBox = $('#message-box');
        var wsUri = "wss://testing.videovoyager.org:9000/poc/server.php";
        websocket = new WebSocket(wsUri);

        websocket.onopen = function(ev) { // connection is open
            msgBox.append('<div class="system_msg" style="color:#bbbbbb">Welcome! Start chatting now.</div>'); //notify user
        }
        // Message received from server
        websocket.onmessage = function(ev) {
            console.log("Message received");
            console.log(ev);

            var response 		= JSON.parse(ev.data); //PHP sends Json data

            console.log(response);

            var res_type 		= response.type; //message type
            var user_message 	= response.message; //message text
            var user_name 		= response.name; //user name
            var user_color 		= response.color; //color
            var room 		    = response.room; //color

            console.log("Room: " + room);
            console.log("Streamer: " + '{{ streamer }}');

            if(room == '{{ streamer }}')
            switch(res_type){
                case 'usermsg':
                    var ts = new Date();
                    //console.log(ts.toDateString());
                    msgBox.append('<div><span class="user_name" style="color:' + user_color + '">' + user_name + ' ' + ts.toLocaleTimeString() + '</span> : <span class="user_message">' + user_message + '</span></div>');
                    break;
                case 'system':
                    msgBox.append('<div style="color:#bbbbbb">' + user_message + '</div>');
                    break;
            }
            msgBox[0].scrollTop = msgBox[0].scrollHeight; //scroll message

        };

        websocket.onerror	= function(ev){ msgBox.append('<div class="system_error">Error Occurred - ' + ev.data + '</div>'); };
        websocket.onclose 	= function(ev){ msgBox.append('<div class="system_msg">Connection Closed</div>'); };

        //Message send button
        $('#send-message').click(function(){
            send_message();
        });

        //User hits enter key
        $( "#message" ).on( "keydown", function( event ) {
            if(event.which==13){
                send_message();
            }
        });

        //Send message
        function send_message(){
            var message_input = $('#message'); //user message text
            var name_input = $('#name'); //user name

            if(name_input.val() == ""){ //empty name?
                alert("Enter your Name please!");
                return;
            }
            if(message_input.val() == ""){ //emtpy message?
                alert("Please enter a message before clicking send.");
                return;
            }

            //prepare json data
            var msg = {
                message: message_input.val(),
                name: name_input.val(),
                color : '<?php echo $colors[$color_pick]; ?>',
                room: '{{ streamer }}'
            };
            //convert and send data to server
            websocket.send(JSON.stringify(msg));
            message_input.val(''); //reset message input
        }
    </script>
    <script src="https://player.live-video.net/1.2.0/amazon-ivs-player.min.js"></script>
    <script language="JavaScript" type="text/javascript">
        // JS for aws streaming player
        (function (IVSPlayerPackage) {
            // First, check if the browser supports the IVS player.
            if (!IVSPlayerPackage.isPlayerSupported) {
                console.warn("The current browser does not support the IVS player.");
                return;
            }

            const PlayerState = IVSPlayerPackage.PlayerState;
            const PlayerEventType = IVSPlayerPackage.PlayerEventType;

            // Initialize player
            const player = IVSPlayerPackage.create();
            console.log("IVS Player version:", player.getVersion());
            player.attachHTMLVideoElement(document.getElementById("video-player"));

            // Attach event listeners
            player.addEventListener(PlayerState.PLAYING, function () {
                console.log("Player State - PLAYING");
            });
            player.addEventListener(PlayerState.ENDED, function () {
                console.log("Player State - ENDED");
            });
            player.addEventListener(PlayerState.READY, function () {
                console.log("Player State - READY");
            });
            player.addEventListener(PlayerEventType.ERROR, function (err) {
                console.warn("Player Event - ERROR:", err);
            });
            player.addEventListener(PlayerEventType.TEXT_METADATA_CUE, (cue) => {
                const metadataText = cue.text;
                const position = player.getPosition().toFixed(2);
                console.log(
                    `PlayerEvent - TEXT_METADATA_CUE: "${metadataText}". Observed ${position}s after playback started.`
                );
            });

            // Setup stream and play
            player.setAutoplay(true);
            player.load(
                "https://a5e08faf82b5.us-west-2.playback.live-video.net/api/video/v1/us-west-2.185192162905.channel.h1OeAA6SIh0Q.m3u8"
            );
            player.setVolume(0.5);
        })(window.IVSPlayer);
    </script>
{% endblock %}
